<div class="comments-section container">
    <h3 class="comments-title">Commentaires</h3>

    <div class="comment-form">
        <textarea id="comment-textarea" class="comment-textarea" placeholder="Écrit un commentaire..."></textarea>
        <p class="error-comment-message d-none">Ton commentaire ne peut pas être vide</p>
        <button id="submit-comment-btn" class="submit-comment-btn">Poster le commentaire</button>
    </div>

    <div class="comments-list">
        {% if comments|length == 0 %}
            <p class="no-comments-message">Pas encore de commentaires. Soyez le premier à commenter !</p>
        {% else %}
        {% for comment in comments %}
        <div class="comment" data-id="{{ comment.id }}">
            <div class="comment-content">
                <div class="comment-author">
                    <span class="author-name">{{ comment.user.username }}</span>
                    <span class="comment-date">{{ comment.getElapsedTime(user_timezone) }}</span>
                </div>
                <div class="comment-body">
                    <p class="comment-text">{{ comment.comment }}</p>
                    {% if app.user and app.user.id == comment.user.id %}
                        <i class="fas fa-trash delete-icon delete-icon-comment"></i>
                    {% endif %}
                </div>
            </div>
        </div>
    {% endfor %}
    
        {% endif %}
    </div>

        {{ include('site/article/pagination.html.twig') }}


</div>

<script>
document.getElementById('submit-comment-btn').addEventListener('click', function() {
    const commentText = document.getElementById('comment-textarea').value;

    if (commentText.trim() !== '') {
        fetch('{{ path('post_comment', {'slug': article.slug}) }}', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest',
            },
            body: JSON.stringify({ comment: commentText })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                const noCommentsMessage = document.querySelector('.no-comments-message');
                if (noCommentsMessage) {
                    noCommentsMessage.remove();
                }

                // Crée le nouveau commentaire avec l'ID correct
                const newComment = `
                    <div class="comment" data-id="${data.commentId}">
                        <div class="comment-content">
                            <div class="comment-author">
                                <span class="author-name">${data.username}</span>
                                <span class="comment-date">À l'instant</span>
                            </div>
                            <div class="comment-body">
                                <p class="comment-text">${commentText}</p>
                                <i class="fas fa-trash delete-icon delete-icon-comment"></i>
                            </div>
                        </div>
                    </div>
                `;

                // Ajoute le nouveau commentaire à la liste
                const commentsList = document.querySelector('.comments-list');
                commentsList.insertAdjacentHTML('beforeend', newComment);

                // Vide le textarea après l'ajout
                document.getElementById('comment-textarea').value = '';

                // Récupère l'icône de suppression du nouveau commentaire et attache l'événement de suppression
                const newIcon = commentsList.querySelector(`.comment[data-id="${data.commentId}"] .delete-icon`);
                attachDeleteEvent(newIcon);  // Assure l'attachement de l'événement de suppression à la nouvelle icône
            } else {
                window.location.href = '{{ path('app_login') }}';
            }
        });
    } else {
        const errorMessage = document.querySelector('.error-comment-message');
        errorMessage.classList.remove('d-none');
        setTimeout(() => {
            errorMessage.classList.add('d-none');
        }, 2000);
    }
});

// Fonction pour attacher l'événement de suppression
function attachDeleteEvent(icon) {
    icon.addEventListener('click', function() {
        const commentElement = this.closest('.comment');
        const commentId = commentElement.dataset.id;

        // Vérifie si commentId est bien défini
        if (commentId) {
            fetch(`/comment/${commentId}`, {
                method: 'DELETE',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest',
                },
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    commentElement.remove();
                } else {
                    alert('Error: Could not delete the comment.');
                }
            });
        } else {
            alert('Error: Comment ID is undefined.');
        }
    });
}

// Attache l'événement de suppression pour les commentaires existants
document.querySelectorAll('.delete-icon').forEach(icon => {
    attachDeleteEvent(icon);
});

document.querySelectorAll('.pagination a').forEach(link => {
    link.addEventListener('click', function(e) {
        e.preventDefault();

        const url = this.getAttribute('href');
        
        fetch(url, {
            method: 'GET',
            headers: {
                'X-Requested-With': 'XMLHttpRequest',
            }
        })
        .then(response => response.json())
        .then(data => {
            const commentsList = document.querySelector('.comments-list');
            commentsList.innerHTML = ''; // Vide la liste actuelle des commentaires

            // Ajoute les nouveaux commentaires
            data.comments.forEach(comment => {
                const newComment = `
                    <div class="comment" data-id="${comment.id}">
                        <div class="comment-content">
                            <div class="comment-author">
                                <span class="author-name">${comment.username}</span>
                                <span class="comment-date">${comment.elapsedTime}</span>
                            </div>
                            <div class="comment-body">
                                <p class="comment-text">${comment.comment}</p>
                                ${comment.canDelete ? '<i class="fas fa-trash delete-icon delete-icon-comment"></i>' : ''}
                            </div>
                        </div>
                    </div>
                `;
                commentsList.insertAdjacentHTML('beforeend', newComment);
            });

            // Mets à jour la pagination
            const paginationContainer = document.querySelector('.pagination');
            paginationContainer.innerHTML = data.paginationHtml;

            // Attache l'événement de suppression aux nouveaux commentaires
            document.querySelectorAll('.delete-icon').forEach(icon => {
                attachDeleteEvent(icon);
            });
        });
    });
});


</script>
